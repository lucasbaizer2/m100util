#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
/* automatically generated by rust-bindgen 0.63.0 */

pub const HEXIN_M100_BUFFER_MAX_SIZE: u32 = 128;
pub const HEXIN_TRUE: u32 = 1;
pub const HEXIN_FALSE: u32 = 0;
pub const HEXIN_SEPARATOR: u8 = 59u8;
pub const HEXIN_MAGICRF_HEAD: u32 = 187;
pub const HEXIN_MAGICRF_TAIL: u32 = 126;
pub const HEXIN_MAGICRF_CMD_INFO: u32 = 3;
pub const HEXIN_MAGICRF_CMD_QUERY: u32 = 34;
pub const HEXIN_MAGICRF_CMD_MUL_QUERY: u32 = 39;
pub const HEXIN_MAGICRF_CMD_STOP: u32 = 40;
pub const HEXIN_MAGICRF_CMD_SET_SELECT: u32 = 12;
pub const HEXIN_MAGICRF_CMD_SEND_SELECT: u32 = 18;
pub const HEXIN_MAGICRF_CMD_READ_DATA: u32 = 57;
pub const HEXIN_MAGICRF_CMD_WRITE_DATA: u32 = 73;
pub const HEXIN_MAGICRF_CMD_LOCK: u32 = 130;
pub const HEXIN_MAGICRF_CMD_KILL: u32 = 101;
pub const HEXIN_MAGICRF_CMD_GET_QUERY: u32 = 13;
pub const HEXIN_MAGICRF_CMD_SET_QUERY: u32 = 14;
pub const HEXIN_MAGICRF_CMD_SET_REGION: u32 = 7;
pub const HEXIN_MAGICRF_CMD_INSERT_RF_CHANNEL: u32 = 169;
pub const HEXIN_MAGICRF_CMD_SET_RF_CHANNEL: u32 = 171;
pub const HEXIN_MAGICRF_CMD_GET_RF_CHANNEL: u32 = 170;
pub const HEXIN_MAGICRF_CMD_SET_HFSS: u32 = 173;
pub const HEXIN_MAGICRF_CMD_GET_RF_POWER: u32 = 183;
pub const HEXIN_MAGICRF_CMD_SET_RF_POWER: u32 = 182;
pub const HEXIN_MAGICRF_CMD_SET_RF_CARRIER: u32 = 176;
pub const HEXIN_MAGICRF_CMD_GET_RF_GAIN: u32 = 241;
pub const HEXIN_MAGICRF_CMD_SET_RF_GAIN: u32 = 240;
pub const HEXIN_MAGICRF_CMD_TEST_SCANJAMMER: u32 = 242;
pub const HEXIN_MAGICRF_CMD_TEST_RSSI: u32 = 243;
pub const HEXIN_MAGICRF_CMD_SET_MODE: u32 = 245;
pub const HEXIN_MAGICRF_CMD_CTRL_IO: u32 = 26;
pub const HEXIN_MAGICRF_CMD_DEEP_SLEEP: u32 = 23;
pub const HEXIN_MAGICRF_CMD_DEEPSLEEP_TIME: u32 = 29;
pub const HEXIN_MAGICRF_CMD_IDLE: u32 = 4;
pub const HEXIN_MAGICRF_CMD_ERROR: u32 = 255;
pub const HEXIN_ERROR: u32 = 0;
pub const HEXIN_MAGICRF_BASE: u32 = 1;
pub const HEXIN_MAGICRF_INFO: u32 = 1;
pub const HEXIN_MAGICRF_QUERY: u32 = 2;
pub const HEXIN_MAGICRF_MUL_QUERY: u32 = 4;
pub const HEXIN_MAGICRF_STOP: u32 = 8;
pub const HEXIN_MAGICRF_SET_SELECT: u32 = 16;
pub const HEXIN_MAGICRF_SEND_SELECT: u32 = 32;
pub const HEXIN_MAGICRF_READ_DATA: u32 = 64;
pub const HEXIN_MAGICRF_WRITE_DATA: u32 = 128;
pub const HEXIN_MAGICRF_LOCK: u32 = 256;
pub const HEXIN_MAGICRF_KILL: u32 = 512;
pub const HEXIN_MAGICRF_GET_QUERY: u32 = 1024;
pub const HEXIN_MAGICRF_SET_QUERY: u32 = 2048;
pub const HEXIN_MAGICRF_SET_REGION: u32 = 4096;
pub const HEXIN_MAGICRF_INSERT_RF_CHANNEL: u32 = 8192;
pub const HEXIN_MAGICRF_SET_RF_CHANNEL: u32 = 16384;
pub const HEXIN_MAGICRF_GET_RF_CHANNEL: u32 = 32768;
pub const HEXIN_MAGICRF_SET_HFSS: u32 = 65536;
pub const HEXIN_MAGICRF_GET_RF_POWER: u32 = 131072;
pub const HEXIN_MAGICRF_SET_RF_POWER: u32 = 262144;
pub const HEXIN_MAGICRF_SET_RF_CARRIER: u32 = 524288;
pub const HEXIN_MAGICRF_GET_RF_GAIN: u32 = 1048576;
pub const HEXIN_MAGICRF_SET_RF_GAIN: u32 = 2097152;
pub const HEXIN_MAGICRF_TEST_SCANJAMMER: u32 = 4194304;
pub const HEXIN_MAGICRF_TEST_RSSI: u32 = 8388608;
pub const HEXIN_MAGICRF_SET_MODE: u32 = 16777216;
pub const HEXIN_MAGICRF_CTRL_IO: u32 = 33554432;
pub const HEXIN_MAGICRF_DEEP_SLEEP: u32 = 67108864;
pub const HEXIN_MAGICRF_DEEPSLEEP_TIME: u32 = 134217728;
pub const HEXIN_MAGICRF_IDLE: u32 = 268435456;
pub const HEXIN_MAGICRF_NOTHING: u32 = 1073741824;
pub const HEXIN_MAGICRF_ERROR: u32 = 268435456;
pub const HEXIN_FAIL_READ: u32 = 9;
pub const HEXIN_ERROR_READ: u32 = 160;
pub const HEXIN_FAIL_WRITE: u32 = 16;
pub const HEXIN_ERROR_WRITE: u32 = 176;
pub const HEXIN_FAIL_LOCK: u32 = 19;
pub const HEXIN_ERROR_LOCK: u32 = 192;
pub const HEXIN_FAIL_KILL: u32 = 18;
pub const HEXIN_ERROR_KILL: u32 = 208;
pub const HEXIN_FAIL_BPL: u32 = 20;
pub const HEXIN_ERROR_BPL: u32 = 224;
pub const NXP_G2X_ERROR_CHANGE_CONFIG: u32 = 26;
pub const NXP_G2X_ERROR_READ_PROTECT: u32 = 42;
pub const NXP_G2X_ERROR_RESET_PROTECT: u32 = 43;
pub const NXP_G2X_ERROR_CHANGE_EAS: u32 = 27;
pub const NXP_G2X_ERROR_EAS_ALARM: u32 = 29;
pub const NXP_G2X_ERROR_SPECIAL: u32 = 224;
pub const HEXIN_ERROR_INVENTORY: u32 = 21;
pub const HEXIN_ERROR_ACCESS: u32 = 22;
pub const HEXIN_ERROR_COMMAND: u32 = 23;
pub const HEXIN_ERROR_FHSS: u32 = 32;
pub const tag_error_code_t_ERROR_OTHER: tag_error_code_t = 0;
pub const tag_error_code_t_MEMORY_OVERRUN: tag_error_code_t = 3;
pub const tag_error_code_t_MEMORY_LOCKED: tag_error_code_t = 4;
pub const tag_error_code_t_INSUFFICIENT_POWER: tag_error_code_t = 11;
pub const tag_error_code_t_NON_SPECIFIC: tag_error_code_t = 15;
pub type tag_error_code_t = ::std::os::raw::c_uint;
pub const module_packet_type_t_TYPE_COMMAND: module_packet_type_t = 0;
pub const module_packet_type_t_TYPE_RESPONSE: module_packet_type_t = 1;
pub const module_packet_type_t_TYPE_NOTICE: module_packet_type_t = 2;
#[doc = "                      Enumerations"]
pub type module_packet_type_t = ::std::os::raw::c_uint;
pub const module_memory_bank_t_BANK_RFU: module_memory_bank_t = 0;
pub const module_memory_bank_t_BANK_EPC: module_memory_bank_t = 1;
pub const module_memory_bank_t_BANK_TID: module_memory_bank_t = 2;
pub const module_memory_bank_t_BANK_USER: module_memory_bank_t = 3;
pub const module_memory_bank_t_BANK_MAX: module_memory_bank_t = 4;
pub type module_memory_bank_t = ::std::os::raw::c_uint;
pub const module_region_t_REGION_CHINA_900: module_region_t = 1;
pub const module_region_t_REGION_AMERICA: module_region_t = 2;
pub const module_region_t_REGION_EUROPE: module_region_t = 3;
pub const module_region_t_REGION_CHINA_800: module_region_t = 4;
pub const module_region_t_REGION_RESERVED1: module_region_t = 5;
pub const module_region_t_REGION_KOREA: module_region_t = 6;
pub const module_region_t_REGION_MAX: module_region_t = 7;
pub type module_region_t = ::std::os::raw::c_uint;
pub const module_mixer_gain_t_MIXER_GAIN_0DB: module_mixer_gain_t = 0;
pub const module_mixer_gain_t_MIXER_GAIN_3DB: module_mixer_gain_t = 1;
pub const module_mixer_gain_t_MIXER_GAIN_6DB: module_mixer_gain_t = 2;
pub const module_mixer_gain_t_MIXER_GAIN_9DB: module_mixer_gain_t = 3;
pub const module_mixer_gain_t_MIXER_GAIN_12DB: module_mixer_gain_t = 4;
pub const module_mixer_gain_t_MIXER_GAIN_15DB: module_mixer_gain_t = 5;
pub const module_mixer_gain_t_MIXER_GAIN_16DB: module_mixer_gain_t = 6;
pub const module_mixer_gain_t_MIXER_GAIN_MAX: module_mixer_gain_t = 7;
pub type module_mixer_gain_t = ::std::os::raw::c_uint;
pub const module_if_gain_t_IF_GAIN_12DB: module_if_gain_t = 0;
pub const module_if_gain_t_IF_GAIN_18DB: module_if_gain_t = 1;
pub const module_if_gain_t_IF_GAIN_21DB: module_if_gain_t = 2;
pub const module_if_gain_t_IF_GAIN_24DB: module_if_gain_t = 3;
pub const module_if_gain_t_IF_GAIN_27DB: module_if_gain_t = 4;
pub const module_if_gain_t_IF_GAIN_30DB: module_if_gain_t = 5;
pub const module_if_gain_t_IF_GAIN_36DB: module_if_gain_t = 6;
pub const module_if_gain_t_IF_GAIN_40DB: module_if_gain_t = 7;
pub const module_if_gain_t_IF_GAIN_MAX: module_if_gain_t = 8;
pub type module_if_gain_t = ::std::os::raw::c_uint;
pub const module_gpio_pin_t_GPIO_PIN_1: module_gpio_pin_t = 1;
pub const module_gpio_pin_t_GPIO_PIN_2: module_gpio_pin_t = 2;
pub const module_gpio_pin_t_GPIO_PIN_3: module_gpio_pin_t = 3;
pub const module_gpio_pin_t_GPIO_PIN_4: module_gpio_pin_t = 4;
pub const module_gpio_pin_t_GPIO_PIN_MAX: module_gpio_pin_t = 5;
pub type module_gpio_pin_t = ::std::os::raw::c_uint;
pub const module_gpio_type_t_GPIO_TYPE_INIT: module_gpio_type_t = 0;
pub const module_gpio_type_t_GPIO_TYPE_WRITE: module_gpio_type_t = 1;
pub const module_gpio_type_t_GPIO_TYPE_READ: module_gpio_type_t = 2;
pub const module_gpio_type_t_GPIO_TYPE_MAX: module_gpio_type_t = 3;
pub type module_gpio_type_t = ::std::os::raw::c_uint;
pub const request_packet_offset_t_HEAD_OFFSET: request_packet_offset_t = 0;
pub const request_packet_offset_t_TYPE_OFFSET: request_packet_offset_t = 1;
pub const request_packet_offset_t_COMMAND_OFFSET: request_packet_offset_t = 2;
pub const request_packet_offset_t_LENGTH_MSB_OFFSET: request_packet_offset_t = 3;
pub const request_packet_offset_t_LENGTH_LSB_OFFSET: request_packet_offset_t = 4;
pub const request_packet_offset_t_PAYLOAD_OFFSET: request_packet_offset_t = 5;
pub type request_packet_offset_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct request_packet_t {
    pub head: ::std::os::raw::c_uchar,
    pub type_: ::std::os::raw::c_uchar,
    pub command: ::std::os::raw::c_uchar,
    pub length: ::std::os::raw::c_ushort,
    pub payload: *mut ::std::os::raw::c_uchar,
    pub checksum: ::std::os::raw::c_uchar,
    pub tail: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_request_packet_t() {
    const UNINIT: ::std::mem::MaybeUninit<request_packet_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<request_packet_t>(),
        24usize,
        concat!("Size of: ", stringify!(request_packet_t))
    );
    assert_eq!(
        ::std::mem::align_of::<request_packet_t>(),
        8usize,
        concat!("Alignment of ", stringify!(request_packet_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(request_packet_t),
            "::",
            stringify!(head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(request_packet_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).command) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(request_packet_t),
            "::",
            stringify!(command)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(request_packet_t),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).payload) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(request_packet_t),
            "::",
            stringify!(payload)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).checksum) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(request_packet_t),
            "::",
            stringify!(checksum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tail) as usize - ptr as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(request_packet_t),
            "::",
            stringify!(tail)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct packet_handler_t {
    pub buffer: [::std::os::raw::c_uchar; 128usize],
    pub offset: ::std::os::raw::c_uint,
    pub in_packet: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_packet_handler_t() {
    const UNINIT: ::std::mem::MaybeUninit<packet_handler_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<packet_handler_t>(),
        136usize,
        concat!("Size of: ", stringify!(packet_handler_t))
    );
    assert_eq!(
        ::std::mem::align_of::<packet_handler_t>(),
        4usize,
        concat!("Alignment of ", stringify!(packet_handler_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(packet_handler_t),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(packet_handler_t),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).in_packet) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(packet_handler_t),
            "::",
            stringify!(in_packet)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hexin_ring_buffer_t {
    pub buffer: *mut ::std::os::raw::c_uchar,
    pub size: ::std::os::raw::c_uint,
    pub head: ::std::os::raw::c_uint,
    pub tail: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_hexin_ring_buffer_t() {
    const UNINIT: ::std::mem::MaybeUninit<hexin_ring_buffer_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<hexin_ring_buffer_t>(),
        24usize,
        concat!("Size of: ", stringify!(hexin_ring_buffer_t))
    );
    assert_eq!(
        ::std::mem::align_of::<hexin_ring_buffer_t>(),
        8usize,
        concat!("Alignment of ", stringify!(hexin_ring_buffer_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hexin_ring_buffer_t),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hexin_ring_buffer_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).head) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(hexin_ring_buffer_t),
            "::",
            stringify!(head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tail) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hexin_ring_buffer_t),
            "::",
            stringify!(tail)
        )
    );
}
extern "C" {
    pub fn hexinRingBufferInit(
        ring_buffer: *mut hexin_ring_buffer_t,
        buffer: *mut ::std::os::raw::c_uchar,
        buffer_size: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn hexinRingBufferWrite(
        ring_buffer: *mut hexin_ring_buffer_t,
        data: *const ::std::os::raw::c_uchar,
        data_length: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn hexinRingBufferRead(
        ring_buffer: *mut hexin_ring_buffer_t,
        data: *mut ::std::os::raw::c_uchar,
        data_length: ::std::os::raw::c_uint,
        number_of_bytes_read: *mut ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn hexinRingBufferUsedSpace(
        ring_buffer: *mut hexin_ring_buffer_t,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn hexinRingBufferFreeSpace(
        ring_buffer: *mut hexin_ring_buffer_t,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn version(
        param: ::std::os::raw::c_uchar,
        pbuf: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn query(
        loop_: ::std::os::raw::c_ushort,
        pbuf: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn kill(
        pwd: *const ::std::os::raw::c_uchar,
        pbuf: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn getPaPower(pbuf: *mut ::std::os::raw::c_uchar) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn setPaPower(power: f32, pbuf: *mut ::std::os::raw::c_uchar) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn setMode(
        mode: ::std::os::raw::c_uchar,
        pbuf: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn stop(pbuf: *mut ::std::os::raw::c_uchar) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn deepSleep(pbuf: *mut ::std::os::raw::c_uchar) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn testRSSI(pbuf: *mut ::std::os::raw::c_uchar) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn scanJammer(pbuf: *mut ::std::os::raw::c_uchar) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn setHFSS(
        status: ::std::os::raw::c_uchar,
        pbuf: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn setRegion(
        region: module_region_t,
        pbuf: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn deepSleepTime(
        minute: ::std::os::raw::c_uchar,
        pbuf: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn setRFCarrier(
        status: ::std::os::raw::c_uchar,
        pbuf: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn setRFChannel(
        index: ::std::os::raw::c_uchar,
        pbuf: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn setSelectMode(
        mode: ::std::os::raw::c_uchar,
        pbuf: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn getRevDemodulatorParam(pbuf: *mut ::std::os::raw::c_uchar) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn setRevDemodulatorParam(
        mixer: module_mixer_gain_t,
        ifgain: module_if_gain_t,
        thrd: ::std::os::raw::c_ushort,
        pbuf: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn idle(
        mode: ::std::os::raw::c_uchar,
        minute: ::std::os::raw::c_uchar,
        pbuf: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn lock(
        pwd: *const ::std::os::raw::c_uchar,
        ld: *const ::std::os::raw::c_uchar,
        pbuf: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn insertRFChannel(
        start: ::std::os::raw::c_uchar,
        stop: ::std::os::raw::c_uchar,
        pbuf: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn setQueryParam(
        select: ::std::os::raw::c_uchar,
        session: ::std::os::raw::c_uchar,
        target: ::std::os::raw::c_uchar,
        qvalue: ::std::os::raw::c_uchar,
        pbuf: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn setSelectParam(
        select: ::std::os::raw::c_uchar,
        ptr: ::std::os::raw::c_uint,
        mask: *const ::std::os::raw::c_char,
        maskLen: ::std::os::raw::c_uchar,
        maskflag: ::std::os::raw::c_uchar,
        truncate: ::std::os::raw::c_uchar,
        pbuf: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn readData(
        pwd: *const ::std::os::raw::c_uchar,
        pwdflag: ::std::os::raw::c_uchar,
        bank: module_memory_bank_t,
        sa: ::std::os::raw::c_ushort,
        dl: ::std::os::raw::c_ushort,
        pbuf: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn writeData(
        pwd: *const ::std::os::raw::c_uchar,
        pwdflag: ::std::os::raw::c_uchar,
        bank: module_memory_bank_t,
        sa: ::std::os::raw::c_ushort,
        dl: ::std::os::raw::c_ushort,
        dt: *mut ::std::os::raw::c_uchar,
        pbuf: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn writeEPC(
        pwd: *const ::std::os::raw::c_uchar,
        pwdflag: ::std::os::raw::c_uchar,
        dt: *mut ::std::os::raw::c_uchar,
        dl: ::std::os::raw::c_ushort,
        pbuf: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn unpackFrame(
        frame: *mut ::std::os::raw::c_uchar,
        param: *mut ::std::os::raw::c_uchar,
        length: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn packetHandler(
        ringbuffer: *mut hexin_ring_buffer_t,
        trigger: ::std::os::raw::c_uint,
        frame: *const ::std::os::raw::c_uchar,
        frame_length: ::std::os::raw::c_uint,
        callback: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_uchar, arg2: ::std::os::raw::c_uint),
        >,
    ) -> ::std::os::raw::c_uint;
}
